{"remainingRequest":"C:\\00_WORK\\workspace\\vue_frontend\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\00_WORK\\workspace\\vue_frontend\\src\\views\\plando\\MyPlandoRegi.vue?vue&type=style&index=0&id=00173366&scoped=true&lang=css&","dependencies":[{"path":"C:\\00_WORK\\workspace\\vue_frontend\\src\\views\\plando\\MyPlandoRegi.vue","mtime":1593763958607},{"path":"C:\\00_WORK\\workspace\\vue_frontend\\node_modules\\css-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\00_WORK\\workspace\\vue_frontend\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":499162500000},{"path":"C:\\00_WORK\\workspace\\vue_frontend\\node_modules\\postcss-loader\\src\\index.js","mtime":499162500000},{"path":"C:\\00_WORK\\workspace\\vue_frontend\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\00_WORK\\workspace\\vue_frontend\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKDQouYm9yZGVyLXJlZCB7IGJhY2tncm91bmQtY29sb3I6ICNlNTNlM2UgfQ0KLmlubmVyLXNlbGVjdCB7d2lkdGg6MTAwJTsgbWluLXdpZHRoOmF1dG8gIWltcG9ydGFudDsgcGFkZGluZzo1cHggIWltcG9ydGFudDsgbWFyZ2luLXJpZ2h0OjAgIWltcG9ydGFudH0NCg=="},{"version":3,"sources":["MyPlandoRegi.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0eA;AACA","file":"MyPlandoRegi.vue","sourceRoot":"src/views/plando","sourcesContent":["<template>\r\n  <div class=\"conts-area\" @keydown=\"enterEvent($event)\">\r\n    <div class=\"conts-tit\">\r\n      <h2>업무실적 등록/수정</h2>\r\n    </div>\r\n    <div class=\"list-top-area\">\r\n      <div class=\"fl\">\r\n        <label for=\"s1\">부서명</label>\r\n        <select id=\"s1\" title=\"select\" disabled>\r\n          <option v-for=\"department in departments\" v-bind:key=\"department.scode\" v-bind:value=\"department.scode\" v-bind:selected=\"department.myDept==='Y'\">{{ department.scodeNm }}</option>\r\n        </select>\r\n      </div>\r\n      <p class=\"d-in fl mt5 mg10\">금주</p>\r\n      <div class=\"fl wp25\">\r\n        <div class=\"vcal-area\">\r\n          <v-date-picker\r\n            mode='range'\r\n            v-model='thisWeek'\r\n            :disabled-dates='{ weekdays: [1, 7] }'\r\n            :popover=\"{ placement: 'bottom', visibility: 'click' }\">\r\n          </v-date-picker>\r\n        </div>\r\n      </div>\r\n      <p class=\"d-in fl mt5 mg10\">차주</p>\r\n      <div class=\"fl wp25\">\r\n          <input type=\"text\" v-model=\"nextWeekText\" readonly>\r\n      </div>\r\n    </div>\r\n    <div class=\"clearfix mt20\">\r\n      <div class=\"d-ib fl\">\r\n        <button type=\"button\" title=\"금주실적 추가\" class=\"btn btn-gray\" @click=\"addRow(doRows, thisWeek)\">금주실적 추가</button>\r\n        <button type=\"button\" title=\"결재상신\" class=\"btn btn-black\" @click=\"copyPlan()\">전주계획 복사</button>\r\n      </div>\r\n      <div class=\"t-right\">\r\n        <button type=\"button\" title=\"저장\" class=\"btn btn-blue\" @click=\"savePlando()\">저장</button>\r\n      </div>\r\n    </div>\r\n    <div class=\"tbl-area\">\r\n      <input type=\"hidden\" v-model=\"mode\">\r\n      <!-- <MyDoRegi/>\r\n      <MyPlanRegi/> -->\r\n      <div>\r\n    <!-- 금주실적 start -->\r\n      <table class=\"tbl\">\r\n        <caption>리스트</caption>\r\n        <colgroup>\r\n          <col style=\"width:50%\">\r\n          <col style=\"width:14%\">\r\n          <col style=\"width:14%\">\r\n          <col style=\"width:12%\">\r\n          <col style=\"width:10%\">\r\n        </colgroup>\r\n        <thead>\r\n          <tr>\r\n            <th colspan=\"5\">금주실적</th>\r\n          </tr>\r\n          <tr>\r\n            <th>실적</th>\r\n            <th>시작일</th>\r\n            <th>종료일</th>\r\n            <th>계획</th>\r\n            <th>삭제</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n          </tr>\r\n          <tr v-for=\"(doValue, doRow) in doRows\" v-bind:key=\"doValue.serial\">\r\n            <td class=\"t-left\">\r\n              <textarea id=\"ta1\" name=\"ta1\" rows=\"5\" v-model=\"doValue.content\" :maxlength=\"1000\" @keydown=\"onKeyDown($event)\"></textarea>\r\n            </td>\r\n            <td>\r\n              <!-- calendar start -->\r\n              <div class=\"vcal-area\">\r\n                <v-date-picker\r\n                  v-model=\"doValue.sdate\"\r\n                  :disabled-dates='{ weekdays: [1, 7] }'\r\n                  :popover=\"{ placement: 'bottom', visibility: 'click' }\"\r\n                  :masks=\"{ input: 'MM/DD'}\"\r\n                  :min-date=\"thisWeek.start\"\r\n                  :max-date=\"thisWeek.end\">\r\n                </v-date-picker>\r\n              </div>\r\n              <!-- //calendar end -->\r\n            </td>\r\n            <td>\r\n              <!-- calendar start -->\r\n              <div class=\"vcal-area\">\r\n                <v-date-picker\r\n                  v-model=\"doValue.edate\"\r\n                  :disabled-dates='{ weekdays: [1, 7] }'\r\n                  :popover=\"{ placement: 'bottom', visibility: 'click' }\"\r\n                  :masks=\"{ input: 'MM/DD'}\"\r\n                  :min-date=\"doEndMin\">\r\n                </v-date-picker>\r\n              </div>\r\n              <!-- //calendar end -->\r\n            </td>\r\n            <td>\r\n              <label for=\"s1\" class=\"blind\">진행사항</label>\r\n              <select id=\"s2\" title=\"select\" v-model=\"doValue.proceed\" class=\"inner-select\">\r\n                <option v-for=\"proceed in proceeds\" v-bind:key=\"proceed.scode\" v-bind:value=\"proceed.scode\">{{ proceed.scodeNm }}</option>\r\n              </select>\r\n            </td>\r\n            <td><button type=\"button\" title=\"삭제\" class=\"btn btn-black\" @click=\"removeRow(doRows, doRow)\">삭제</button></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <!-- //금주실적 end -->\r\n      <div class=\"clearfix mt40\">\r\n        <div>\r\n          <button type=\"button\" title=\"차주계획 추가\" class=\"btn btn-gray\" @click=\"addRow(planRows, nextWeek)\">차주계획 추가</button>\r\n        </div>\r\n      </div>\r\n      <!-- 차주계획 start -->\r\n      <table class=\"tbl mt10\">\r\n        <caption>리스트</caption>\r\n        <colgroup>\r\n          <col style=\"width:50%\">\r\n          <col style=\"width:10%\">\r\n          <col style=\"width:10%\">\r\n          <col style=\"width:20%\">\r\n          <col style=\"width:10%\">\r\n        </colgroup>\r\n        <thead>\r\n          <tr>\r\n            <th colspan=\"5\">차주계획</th>\r\n          </tr>\r\n          <tr>\r\n            <th>실적</th>\r\n            <th>시작일</th>\r\n            <th>종료일</th>\r\n            <th>비고</th>\r\n            <th>삭제</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          <tr>\r\n          </tr>\r\n          <tr v-for=\"(plan, planRow) in planRows\" v-bind:key=\"plan.serial\">\r\n            <td class=\"t-left\">\r\n              <textarea id=\"ta2\" name=\"ta2\" rows=\"5\" v-model=\"plan.content\" :maxlength=\"1000\" @keydown=\"onKeyDown($event)\"></textarea>\r\n            </td>\r\n            <td>\r\n              <!-- calendar start -->\r\n              <div class=\"vcal-area t2\">\r\n                <v-date-picker\r\n                  v-model='plan.sdate'\r\n                  :disabled-dates='{ weekdays: [1, 7] }'\r\n                  :popover=\"{ placement: 'bottom', visibility: 'click' }\"\r\n                  :masks=\"{ input: 'MM/DD'}\"\r\n                  :min-date=\"planStartMin\"\r\n                  :max-date=\"planStartMax\"\r\n                  :class=\"[ isActive ? redClass: '' ]\">\r\n                </v-date-picker>\r\n              </div>\r\n              <!-- //calendar end -->\r\n            </td>\r\n            <td>\r\n              <!-- calendar start -->\r\n              <div class=\"vcal-area t2\">\r\n                <v-date-picker\r\n                  v-model='plan.edate'\r\n                  :disabled-dates='{ weekdays: [1, 7] }'\r\n                  :popover=\"{ placement: 'bottom', visibility: 'click' }\"\r\n                  :masks=\"{ input: 'MM/DD'}\"\r\n                  :min-date=\"planEndMin\">\r\n                </v-date-picker>\r\n              </div>\r\n              <!-- //calendar end -->\r\n            </td>\r\n            <td>\r\n              <textarea id=\"ta2\" name=\"ta2\" rows=\"3\" v-model=\"plan.bigo\"></textarea>\r\n            </td>\r\n            <td><button type=\"button\" title=\"결재상신\" class=\"btn btn-black\" @click=\"removeRow(planRows, planRow)\">삭제</button></td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n      <!-- //차주계획 end -->\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios'\r\nimport GroupCode from '../../mixins/GroupCode.js'\r\nimport moment from 'moment'\r\n\r\nexport default {\r\n  name: 'MyPlandoRegi',\r\n  data () {\r\n    return {\r\n      thisWeek: { }, // 금주 날짜(시작일~종료일)\r\n      nextWeek: { }, // 차주 날짜(시작일~종료일)\r\n      nextWeekText: '', // 차주 날짜 text\r\n      doRows: [], // 금주실적 row (진행사항은 default를 3(미처리)으로 설정)\r\n      planRows: [], // 차주계획 row\r\n      proceeds: [], // 진행사항 select option\r\n      departments: [], // 부서명\r\n      serial: 1, // 금주실적 row key 값\r\n      isActive: false,\r\n      redClass: 'border-red',\r\n      mode: '', // 등록모드인지 수정모드인지 구분 (등록: '', 수정: 'edit')\r\n      doEndMin: '', // 금주 종료일 min-date 설정\r\n      planStartMin: '', // 차주 시작일 min-date 설정\r\n      planStartMax: '', // 차주 시작일 max-date 설정ㄴ\r\n      planEndMin: '' // 차주 종료일 min-date 설정\r\n    }\r\n  },\r\n  created: function () {\r\n    this.settingDate(new Date())\r\n    this.addRow(this.doRows, this.thisWeek) // 금주실적 기본 1줄\r\n    this.addRow(this.planRows, this.nextWeek)\r\n    this.getDepartmentInfo() // 부서 정보 가져오기\r\n    this.getProceedData(GroupCode.STATE) // 진행사항 option 가져오기\r\n\r\n    /* 수정 모드인 경우 */\r\n    if (this.$route.query.mode === 'edit') {\r\n      this.mode = this.$route.query.mode\r\n      this.initPlando()\r\n    }\r\n  },\r\n  watch: {\r\n    /* 금주의 시작일 변경을 감지\r\n    금주 날짜 선택 시, 사용자가 시작일을 어떤 요일로 선택하든 무조건 월요일이 시작일이 되도록 세팅 */\r\n    'thisWeek.start': function () {\r\n      if (this.thisWeek.start.getDay() !== 1) {\r\n        this.thisWeek.start.setDate(this.thisWeek.start.getDate() - (this.thisWeek.start.getDay() - 1))\r\n      }\r\n      this.thisWeek.start.setHours(12)\r\n\r\n      const date = this.calculationDate(this.thisWeek.start)\r\n      this.thisWeek.end = date.wkEnd\r\n      this.nextWeek.start = date.nwStart\r\n      this.nextWeek.end = date.nwEnd\r\n      this.nextWeekText = date.nwStartText + ' - ' + date.nwEndText\r\n\r\n      // 시작일, 종료일 min-date 설정\r\n      this.doEndMin = this.thisWeek.start\r\n      this.planStartMin = date.nwStart\r\n      this.planStartMax = date.nwEnd\r\n      this.planEndMin = date.nwStart\r\n    }\r\n  },\r\n  methods: {\r\n    /* 날짜 계산 */\r\n    calculationDate: function (anchorDate) {\r\n      const currentWeekDay = anchorDate.getDay()\r\n      const lessDays = currentWeekDay === 0 ? 6 : currentWeekDay - 1\r\n      const wkStart = new Date(new Date(anchorDate).setDate(anchorDate.getDate() - lessDays))\r\n      const wkEnd = new Date(new Date(wkStart).setDate(wkStart.getDate() + 4))\r\n      const nwStart = new Date(new Date(wkStart).setDate(wkStart.getDate() + 7))\r\n      const nwEnd = new Date(new Date(nwStart).setDate(nwStart.getDate() + 4))\r\n      const nwStartText = nwStart.toISOString().substr(0, 10).replace(/-/g, '.')\r\n      const nwEndText = nwEnd.toISOString().substr(0, 10).replace(/-/g, '.')\r\n\r\n      return { wkStart: wkStart, wkEnd: wkEnd, nwStart: nwStart, nwEnd: nwEnd, nwStartText: nwStartText, nwEndText: nwEndText }\r\n    },\r\n    initPlando: function () {\r\n      for (const value of this.$route.query.listData) {\r\n        value.sdate = new Date(value.sdate)\r\n        value.edate = new Date(value.edate)\r\n      }\r\n\r\n      const doData = this.$route.query.listData.filter(function (el) {\r\n        return el.gubun === '1'\r\n      })\r\n      const planData = this.$route.query.listData.filter(function (el) {\r\n        return el.gubun === '2'\r\n      })\r\n\r\n      this.emptySpaceDelete(this.doRows)\r\n      this.emptySpaceDelete(this.planRows)\r\n\r\n      this.doRows.push(...doData)\r\n      this.planRows.push(...planData)\r\n      this.settingDate(new Date(this.$route.query.sDate))\r\n    },\r\n    /* 오늘 날짜를 받아와서 금주 날짜와 차주 날짜 default setting */\r\n    settingDate: function (initDate) {\r\n      var date = this.calculationDate(initDate)\r\n      this.thisWeek.start = date.wkStart\r\n      this.thisWeek.end = date.wkEnd\r\n      this.nextWeek.start = date.nwStart\r\n      this.nextWeek.end = date.nwEnd\r\n      this.nextWeekText = date.nwStartText + ' - ' + date.nwEndText\r\n\r\n      // 시작일, 종료일 min-date 설정\r\n      this.doEndMin = this.thisWeek.start\r\n      this.planStartMin = date.nwStart\r\n      this.planStartMax = date.nwEnd\r\n      this.planEndMin = date.nwStart\r\n    },\r\n    // @TODO 믹스인으로 빼기\r\n    getProceedData: function (groupCode) {\r\n      axios.get('/api/selectCode', {\r\n        params: { groupCode: groupCode }\r\n      })\r\n        .then(response => {\r\n          if (response.status === 200) {\r\n            // DB에서 진행사항 항목을 불러와서 push\r\n            this.proceeds.push(...response.data.data)\r\n          }\r\n        })\r\n        .catch(error => {\r\n          console.log(error)\r\n        })\r\n    },\r\n    /* 실적 및 계획 row 추가 */\r\n    addRow: function (row, date) {\r\n      this.serial = this.serial + 1\r\n      row.push({ serial: this.serial, gubun: '1', content: '', sdate: date.start, edate: date.end, proceed: '3' })\r\n    },\r\n    /* 실적 및 계획 row 삭제 */\r\n    removeRow: function (rows, row) {\r\n      rows.splice(row, 1)\r\n    },\r\n    /* 전주계획 복사 */\r\n    copyPlan: function () {\r\n      const sDate = this.dateToString(new Date(new Date(this.thisWeek.start).setDate(this.thisWeek.start.getDate())))\r\n      axios.get('/api/getLastWeekPlanCopy', {\r\n        params: { gubun: '2', sDate: sDate }\r\n      })\r\n        .then(response => {\r\n          if (response.status === 200) {\r\n            if (response.data.data.length === 0) {\r\n              alert('복사할 전주 계획이 없습니다')\r\n              return\r\n            }\r\n            this.emptySpaceDelete(this.doRows) // 빈칸 삭제\r\n            // String -> date 형식으로 변경\r\n            for (const value of response.data.data) {\r\n              value.sdate = new Date(value.sdate)\r\n              value.edate = new Date(value.edate)\r\n            }\r\n\r\n            this.doRows.push(...response.data.data) // spread operator로 배열 한꺼번에 출력 가능\r\n          }\r\n        }).catch((error) => {\r\n          console.log(error)\r\n        })\r\n    },\r\n    /* 전주 계획 복사 시, 실적이 비어있는 칸은 삭제 */\r\n    emptySpaceDelete: function (row) {\r\n      for (let i = 0; i < row.length; i++) {\r\n        if (!row[i].content) { // null, undefied ... 체크\r\n          row.splice(i, 1)\r\n          i--\r\n        }\r\n      }\r\n    },\r\n    /* 날짜(2020년 6월 12일)를 클릭으로 직접 선택한 경우 2020년 6월 12일 0시 0분 0초가 출력되고,\r\n        DB저장시 2020년 6월 11일로 저장되는 문제 발생\r\n        따라서 시,분,초를 더한 값이 0이면 날짜를 다시 세팅한다 */\r\n    checkDate: function (date) {\r\n      date.setHours(12)\r\n      return date\r\n    },\r\n    /* 저장 시 Validation Check */\r\n    saveValidation: function () {\r\n      if (this.mode !== 'edit') {\r\n        if (!this.isNullContent()) {\r\n        // @TODO: 메시지 내용 변경\r\n          alert('금주 실적과 차주 계획이 모두 비어있습니다\\r\\n업무 실적을 입력해주세요')\r\n          return false\r\n        }\r\n      }\r\n\r\n      if (!this.validationStartEnd()) {\r\n        alert('종료일이 시작일보다 이전 날짜일 수 없습니다')\r\n        return false\r\n      }\r\n\r\n      return true\r\n    },\r\n    /* 계획 및 실적 저장 */\r\n    savePlando: function () {\r\n      if (!this.saveValidation()) {\r\n        return\r\n      }\r\n      this.convertData(this.doRows, 'date', 1)\r\n      this.convertData(this.planRows, 'date', 2)\r\n\r\n      const plandoPOList = (this.doRows).concat(this.planRows)\r\n      const editSDate = this.dateToString(new Date(new Date(this.thisWeek.start).setDate(this.thisWeek.start.getDate())))\r\n\r\n      axios\r\n        .post('/api/savePlando',\r\n          { plandoPOList: plandoPOList, mode: this.mode, editSDate: editSDate }\r\n        )\r\n        .then((response) => {\r\n          if (response.data.success) {\r\n            alert(response.data.message)\r\n            // @TODO: parameter 넘기는 다른 방법 고민\r\n            this.$router.replace(this.$route.query.redirect || '/plando/view?thisWeek=' + this.thisWeek.start)\r\n          } else {\r\n            alert(response.data.message)\r\n            this.convertData(this.doRows, 'string')\r\n            this.convertData(this.planRows, 'string')\r\n          }\r\n        })\r\n        .catch((error) => {\r\n          console.log(error)\r\n        })\r\n    },\r\n    /* 실적 저장 전 or 실적 저장 후 data type 변경\r\n    rows: 입력 값\r\n    type: 'date'=dateToString / 'string'=stringToDate\r\n    gubun: 1=실적 / 2=계획\r\n     */\r\n    convertData: function (rows, type, gubun) {\r\n      if (type === 'date') {\r\n        for (let i = 0; i < rows.length; i++) {\r\n          rows[i].sdate = this.dateToString(this.checkDate(rows[i].sdate))\r\n          rows[i].edate = this.dateToString(this.checkDate(rows[i].edate))\r\n          rows[i].gubun = gubun\r\n        }\r\n      } else {\r\n        for (let i = 0; i < rows.length; i++) {\r\n          rows[i].sdate = this.stringToDate(rows[i].sdate)\r\n          rows[i].edate = this.stringToDate(rows[i].edate)\r\n        }\r\n      }\r\n    },\r\n    /* 업무 실적 등록/수정 시 금주 실적과 차주 계획이 모두 비어있는지 확인\r\n    모두 비어있는 경우 값을 입력하라는 메시지창을 띄워준다 */\r\n    isNullContent: function () {\r\n      const doContent = this.doRows.filter(function (el) {\r\n        return el.content.replace(/ /g, '').replace(/(?:\\r\\n|\\r|\\n)/g, '') // 띄어쓰기 or 엔터만 하고 저장하는 경우도 비어있는 것으로 간주\r\n      })\r\n      const planContent = this.planRows.filter(function (el) {\r\n        return el.content.replace(/ /g, '').replace(/(?:\\r\\n|\\r|\\n)/g, '')\r\n      })\r\n\r\n      if (doContent.length + planContent.length === 0) {\r\n        return false\r\n      } else {\r\n        return true\r\n      }\r\n    },\r\n    /* 부서 정보 가져오기 */\r\n    getDepartmentInfo: function () {\r\n      axios.get('/api/getDepartmentInfo', {\r\n        params: { grcode: GroupCode.DEPARTMENT }\r\n      })\r\n        .then(response => {\r\n          if (response.status === 200) {\r\n            this.departments.push(...response.data.data)\r\n          }\r\n        }).catch((error) => {\r\n          console.log(error)\r\n        })\r\n    },\r\n    validationStartEnd: function () {\r\n      for (const value of this.doRows) {\r\n        if (this.checkDate(value.sdate).toISOString().substr(0, 10) > this.checkDate(value.edate).toISOString().substr(0, 10)) {\r\n          return false\r\n        }\r\n      }\r\n\r\n      for (const value of this.planRows) {\r\n        if (this.checkDate(value.sdate).toISOString().substr(0, 10) > this.checkDate(value.edate).toISOString().substr(0, 10)) {\r\n          return false\r\n        }\r\n      }\r\n      return true\r\n    },\r\n    /* Date 형식 -> String 형식으로 변환 */\r\n    dateToString: function (date) {\r\n      return date.toISOString().substr(0, 10).replace(/-/g, '') // 정규식을 이용하여 replaceAll 처리 사용\r\n    },\r\n    /* String형식 -> Date형식으로 변환 */\r\n    stringToDate: function (date) {\r\n      return new Date(moment(date).format('YYYY-MM-DD'))\r\n    },\r\n    /* 글자수 체크 event */\r\n    onKeyDown: function (e) {\r\n      if (e.target.textLength > 1000) {\r\n        alert('글자수를 1000자 이하로 입력해주세요.')\r\n      }\r\n    },\r\n    enterEvent: function (e) {\r\n      // alert('!!!')\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.border-red { background-color: #e53e3e }\r\n.inner-select {width:100%; min-width:auto !important; padding:5px !important; margin-right:0 !important}\r\n</style>\r\n"]}]}